module Theory where

open import Data.List using (List; []; _‚à∑_; _++_)
open import Data.Fin using () renaming (zero to fzero; suc to fsuc)

open import Relation.Binary using (Rel)

open import Level using (suc; _‚äî_)

open import Syntax

record Theory ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ ‚Ñì‚ÇÉ : Set (suc (‚Ñì‚ÇÅ ‚äî ‚Ñì‚ÇÇ ‚äî ‚Ñì‚ÇÉ)) where
  field
    Sg : Signature ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ

  open Signature Sg
  open Term Sg

  field
    Ax : forall Œì A -> Rel (Œì ‚ä¢ A) ‚Ñì‚ÇÉ

  infix 3 _‚ä¢_‚â°_
  infix 3 _‚ä®_‚â°_

  data _‚ä¢_‚â°_ : forall Œì {A} -> Œì ‚ä¢ A -> Œì ‚ä¢ A -> Set (‚Ñì‚ÇÅ ‚äî ‚Ñì‚ÇÇ ‚äî ‚Ñì‚ÇÉ)
  data _‚ä®_‚â°_ : forall Œì {Œì‚Ä≤} -> Œì ‚ä® Œì‚Ä≤ -> Œì ‚ä® Œì‚Ä≤ -> Set (‚Ñì‚ÇÅ ‚äî ‚Ñì‚ÇÇ ‚äî ‚Ñì‚ÇÉ)

  -- Theorems
  data _‚ä¢_‚â°_ where
    ax : forall {Œì A e‚ÇÅ e‚ÇÇ} -> Ax Œì A e‚ÇÅ e‚ÇÇ -> Œì ‚ä¢ e‚ÇÅ ‚â° e‚ÇÇ

    refl : forall {Œì} {A} {e : Œì ‚ä¢ A} -> Œì ‚ä¢ e ‚â° e
    sym : forall {Œì} {A} {e‚ÇÅ : Œì ‚ä¢ A} {e‚ÇÇ} -> Œì ‚ä¢ e‚ÇÅ ‚â° e‚ÇÇ -> Œì ‚ä¢ e‚ÇÇ ‚â° e‚ÇÅ
    trans : forall {Œì} {A} {e‚ÇÅ : Œì ‚ä¢ A} {e‚ÇÇ e‚ÇÉ} -> Œì ‚ä¢ e‚ÇÅ ‚â° e‚ÇÇ -> Œì ‚ä¢ e‚ÇÇ ‚â° e‚ÇÉ -> Œì ‚ä¢ e‚ÇÅ ‚â° e‚ÇÉ

    sub/id : forall {Œì} {A} {e : Œì ‚ä¢ A} -> Œì ‚ä¢ e [ id ] ‚â° e
    sub/‚àô : forall {Œì} {A} {Œì‚Ä≤ Œì‚Ä≤‚Ä≤} {e : Œì‚Ä≤‚Ä≤ ‚ä¢ A} {Œ≥ : Œì‚Ä≤ ‚ä® Œì‚Ä≤‚Ä≤} {Œ¥}
      -> Œì ‚ä¢ e [ Œ≥ ‚àô Œ¥ ] ‚â° e [ Œ≥ ] [ Œ¥ ]

    eta/Unit : forall {Œì} (e : Œì ‚ä¢ Unit) -> Œì ‚ä¢ unit ‚â° e

    beta/*‚ÇÅ : forall {Œì} {A B} (e‚ÇÅ : Œì ‚ä¢ A) (e‚ÇÇ : Œì ‚ä¢ B) -> Œì ‚ä¢ fst (pair e‚ÇÅ e‚ÇÇ) ‚â° e‚ÇÅ
    beta/*‚ÇÇ : forall {Œì} {A B} (e‚ÇÅ : Œì ‚ä¢ A) (e‚ÇÇ : Œì ‚ä¢ B) -> Œì ‚ä¢ snd (pair e‚ÇÅ e‚ÇÇ) ‚â° e‚ÇÇ
    eta/* : forall {Œì} {A B} (e : Œì ‚ä¢ A * B) -> Œì ‚ä¢ pair (fst e) (snd e) ‚â° e

    beta/=> : forall {Œì} {A B} (e : A ‚à∑ Œì ‚ä¢ B) (e‚Ä≤ : Œì ‚ä¢ A) -> Œì ‚ä¢ app (abs e) e‚Ä≤ ‚â° e [ ext id e‚Ä≤ ]
    eta/=> : forall {Œì} {A B} (e : Œì ‚ä¢ A => B) -> Œì ‚ä¢ abs (app (e [ weaken ]) var) ‚â° e

    -- cong
    cong/sub : forall {Œì Œì‚Ä≤} {Œ≥ Œ≥‚Ä≤ : Œì ‚ä® Œì‚Ä≤} {A} {e e‚Ä≤ : Œì‚Ä≤ ‚ä¢ A}
      -> Œì ‚ä® Œ≥ ‚â° Œ≥‚Ä≤
      -> Œì‚Ä≤ ‚ä¢ e ‚â° e‚Ä≤
      -> Œì ‚ä¢ e [ Œ≥ ] ‚â° e‚Ä≤ [ Œ≥‚Ä≤ ]
    cong/pair : forall {Œì} {A B} {e‚ÇÅ e‚ÇÅ‚Ä≤ : Œì ‚ä¢ A} {e‚ÇÇ e‚ÇÇ‚Ä≤ : Œì ‚ä¢ B}
      -> Œì ‚ä¢ e‚ÇÅ ‚â° e‚ÇÅ‚Ä≤
      -> Œì ‚ä¢ e‚ÇÇ ‚â° e‚ÇÇ‚Ä≤
      -> Œì ‚ä¢ pair e‚ÇÅ e‚ÇÇ ‚â° pair e‚ÇÅ‚Ä≤ e‚ÇÇ‚Ä≤
    cong/fst : forall {Œì} {A B} {e e‚Ä≤ : Œì ‚ä¢ A * B}
      -> Œì ‚ä¢ e ‚â° e‚Ä≤
      -> Œì ‚ä¢ fst e ‚â° fst e‚Ä≤
    cong/snd : forall {Œì} {A B} {e e‚Ä≤ : Œì ‚ä¢ A * B}
      -> Œì ‚ä¢ e ‚â° e‚Ä≤
      -> Œì ‚ä¢ snd e ‚â° snd e‚Ä≤
    cong/abs : forall {Œì} {A B} {e e‚Ä≤ : A ‚à∑ Œì ‚ä¢ B}
      -> A ‚à∑ Œì ‚ä¢ e ‚â° e‚Ä≤
      -> Œì ‚ä¢ abs e ‚â° abs e‚Ä≤
    cong/app : forall {Œì} {A B} {e‚ÇÅ e‚ÇÅ‚Ä≤ : Œì ‚ä¢ A => B} {e‚ÇÇ e‚ÇÇ‚Ä≤ : Œì ‚ä¢ A}
      -> Œì ‚ä¢ e‚ÇÅ ‚â° e‚ÇÅ‚Ä≤
      -> Œì ‚ä¢ e‚ÇÇ ‚â° e‚ÇÇ‚Ä≤
      -> Œì ‚ä¢ app e‚ÇÅ e‚ÇÇ ‚â° app e‚ÇÅ‚Ä≤ e‚ÇÇ‚Ä≤

    -- subst commutes with term formers
    comm/func : forall Œì Œì‚Ä≤ (Œ≥ : Œì ‚ä® Œì‚Ä≤) f e
      -> Œì ‚ä¢ func f e [ Œ≥ ] ‚â° func f (e [ Œ≥ ])

    comm/unit : forall Œì Œì‚Ä≤ (Œ≥ : Œì ‚ä® Œì‚Ä≤)
      -> Œì ‚ä¢ unit [ Œ≥ ] ‚â° unit

    comm/pair : forall {Œì Œì‚Ä≤} {Œ≥ : Œì ‚ä® Œì‚Ä≤} {A B} {e‚ÇÅ : Œì‚Ä≤ ‚ä¢ A} {e‚ÇÇ : Œì‚Ä≤ ‚ä¢ B}
      -> Œì ‚ä¢ pair e‚ÇÅ e‚ÇÇ [ Œ≥ ] ‚â° pair (e‚ÇÅ [ Œ≥ ]) (e‚ÇÇ [ Œ≥ ])
    comm/fst : forall {Œì Œì‚Ä≤} {Œ≥ : Œì ‚ä® Œì‚Ä≤} {A B} {e : Œì‚Ä≤ ‚ä¢ A * B}
      -> Œì ‚ä¢ fst e [ Œ≥ ] ‚â° fst (e [ Œ≥ ])
    comm/snd : forall {Œì Œì‚Ä≤} {Œ≥ : Œì ‚ä® Œì‚Ä≤} {A B} {e : Œì‚Ä≤ ‚ä¢ A * B}
      -> Œì ‚ä¢ snd e [ Œ≥ ] ‚â° snd (e [ Œ≥ ])

    comm/abs : forall {Œì Œì‚Ä≤} {Œ≥ : Œì ‚ä® Œì‚Ä≤} {A B} {e : A ‚à∑ Œì‚Ä≤ ‚ä¢ B}
      -> Œì ‚ä¢ (abs e) [ Œ≥ ] ‚â° abs (e [ ext (Œ≥ ‚àô weaken) var ])
    comm/app : forall {Œì Œì‚Ä≤} {Œ≥ : Œì ‚ä® Œì‚Ä≤} {A B} {e‚ÇÅ : Œì‚Ä≤ ‚ä¢ A => B} {e‚ÇÇ}
      -> Œì ‚ä¢ app e‚ÇÅ e‚ÇÇ [ Œ≥ ] ‚â° app (e‚ÇÅ [ Œ≥ ]) (e‚ÇÇ [ Œ≥ ])

    var/ext : forall {Œì Œì‚Ä≤} (Œ≥ : Œì ‚ä® Œì‚Ä≤) {A} (e : Œì ‚ä¢ A)
      -> Œì ‚ä¢ var [ ext Œ≥ e ] ‚â° e

  data _‚ä®_‚â°_ where
    refl : forall {Œì Œì‚Ä≤} {Œ≥ : Œì ‚ä® Œì‚Ä≤} -> Œì ‚ä® Œ≥ ‚â° Œ≥
    sym : forall {Œì Œì‚Ä≤} {Œ≥ Œ≥‚Ä≤ : Œì ‚ä® Œì‚Ä≤} -> Œì ‚ä® Œ≥ ‚â° Œ≥‚Ä≤ -> Œì ‚ä® Œ≥‚Ä≤ ‚â° Œ≥
    trans : forall {Œì Œì‚Ä≤} {Œ≥‚ÇÅ Œ≥‚ÇÇ Œ≥‚ÇÉ : Œì ‚ä® Œì‚Ä≤}
      -> Œì ‚ä® Œ≥‚ÇÅ ‚â° Œ≥‚ÇÇ
      -> Œì ‚ä® Œ≥‚ÇÇ ‚â° Œ≥‚ÇÉ
      -> Œì ‚ä® Œ≥‚ÇÅ ‚â° Œ≥‚ÇÉ

    id‚àôÀ° : forall {Œì Œì‚Ä≤} {Œ≥ : Œì ‚ä® Œì‚Ä≤} -> Œì ‚ä® id ‚àô Œ≥ ‚â° Œ≥
    id‚àô ≥ : forall {Œì Œì‚Ä≤} {Œ≥ : Œì ‚ä® Œì‚Ä≤} -> Œì ‚ä® Œ≥ ‚àô id ‚â° Œ≥

    -- associativity

    !-unique : forall {Œì} {Œ≥ : Œì ‚ä® []} -> Œì ‚ä® ! ‚â° Œ≥
    Œ∑-pair : forall {Œì : Context} {A : Type}
      -> A ‚à∑ Œì ‚ä® ext weaken var ‚â° id
    ext‚àô : forall {Œì Œì‚Ä≤ Œì‚Ä≤‚Ä≤} {Œ≥ : Œì‚Ä≤ ‚ä® Œì‚Ä≤‚Ä≤} {Œ≥‚Ä≤ : Œì ‚ä® Œì‚Ä≤} {A} {e : Œì‚Ä≤ ‚ä¢ A}
      -> Œì ‚ä® ext Œ≥ e ‚àô Œ≥‚Ä≤ ‚â° ext (Œ≥ ‚àô Œ≥‚Ä≤) (e [ Œ≥‚Ä≤ ])

    weaken/ext : forall {Œì Œì‚Ä≤} {Œ≥ : Œì ‚ä® Œì‚Ä≤} {A} {e : Œì ‚ä¢ A}
      -> Œì ‚ä® weaken ‚àô ext Œ≥ e ‚â° Œ≥

    cong/ext : forall {Œì Œì‚Ä≤} {Œ≥ Œ≥‚Ä≤ : Œì ‚ä® Œì‚Ä≤} {A} {e e‚Ä≤ : Œì ‚ä¢ A}
      -> Œì ‚ä® Œ≥ ‚â° Œ≥‚Ä≤
      -> Œì ‚ä¢ e ‚â° e‚Ä≤
      -> Œì ‚ä® ext Œ≥ e ‚â° ext Œ≥‚Ä≤ e‚Ä≤
    cong/‚àô : forall {Œì Œì‚Ä≤ Œì‚Ä≤‚Ä≤} {Œ≥ Œ≥‚Ä≤ : Œì‚Ä≤ ‚ä® Œì‚Ä≤‚Ä≤} {Œ¥ Œ¥‚Ä≤ : Œì ‚ä® Œì‚Ä≤}
      -> Œì‚Ä≤ ‚ä® Œ≥ ‚â° Œ≥‚Ä≤
      -> Œì ‚ä® Œ¥ ‚â° Œ¥‚Ä≤
      -> Œì ‚ä® Œ≥ ‚àô Œ¥ ‚â° Œ≥‚Ä≤ ‚àô Œ¥‚Ä≤

  open import Relation.Binary.Bundles

  TermSetoid : forall {Œì : Context} {A : Type} -> Setoid (‚Ñì‚ÇÅ ‚äî ‚Ñì‚ÇÇ) (‚Ñì‚ÇÅ ‚äî ‚Ñì‚ÇÇ ‚äî ‚Ñì‚ÇÉ)
  TermSetoid {Œì} {A} = record
             { Carrier = Œì ‚ä¢ A
             ; _‚âà_ = Œª e‚ÇÅ e‚ÇÇ ‚Üí Œì ‚ä¢ e‚ÇÅ ‚â° e‚ÇÇ
             ;isEquivalence = record { refl = refl ; sym = sym ; trans = trans }
             }

open import Categories.Category
open import Categories.Category.CartesianClosed

module _ {o ‚Ñì e} (ùíû : Category o ‚Ñì e) (CC : CartesianClosed ùíû) {‚Ñì‚ÇÅ ‚Ñì‚ÇÇ ‚Ñì‚ÇÉ} (Th : Theory ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ ‚Ñì‚ÇÉ) where
  open Category ùíû
  open import Data.Product using (Œ£-syntax)
  open Theory Th
  open import Semantics ùíû CC Sg

  Model : Set (o ‚äî ‚Ñì ‚äî e ‚äî ‚Ñì‚ÇÅ ‚äî ‚Ñì‚ÇÇ ‚äî ‚Ñì‚ÇÉ)
  Model = Œ£[ M ‚àà Structure ] forall {Œì A e‚ÇÅ e‚ÇÇ} -> Ax Œì A e‚ÇÅ e‚ÇÇ -> ‚ü¶ e‚ÇÅ ‚üß M ‚âà ‚ü¶ e‚ÇÇ ‚üß M
